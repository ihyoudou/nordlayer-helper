// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: gateways.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vpn_Gateways_FullMethodName   = "/Vpn/Gateways"
	Vpn_Connect_FullMethodName    = "/Vpn/Connect"
	Vpn_Disconnect_FullMethodName = "/Vpn/Disconnect"
)

// VpnClient is the client API for Vpn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VpnClient interface {
	Gateways(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetGateways, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Vpn_ConnectClient, error)
	Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Vpn_DisconnectClient, error)
}

type vpnClient struct {
	cc grpc.ClientConnInterface
}

func NewVpnClient(cc grpc.ClientConnInterface) VpnClient {
	return &vpnClient{cc}
}

func (c *vpnClient) Gateways(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetGateways, error) {
	out := new(GetGateways)
	err := c.cc.Invoke(ctx, Vpn_Gateways_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Vpn_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vpn_ServiceDesc.Streams[0], Vpn_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vpnConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vpn_ConnectClient interface {
	Recv() (*GenericPayload, error)
	grpc.ClientStream
}

type vpnConnectClient struct {
	grpc.ClientStream
}

func (x *vpnConnectClient) Recv() (*GenericPayload, error) {
	m := new(GenericPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vpnClient) Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Vpn_DisconnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vpn_ServiceDesc.Streams[1], Vpn_Disconnect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vpnDisconnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vpn_DisconnectClient interface {
	Recv() (*GenericPayload, error)
	grpc.ClientStream
}

type vpnDisconnectClient struct {
	grpc.ClientStream
}

func (x *vpnDisconnectClient) Recv() (*GenericPayload, error) {
	m := new(GenericPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VpnServer is the server API for Vpn service.
// All implementations must embed UnimplementedVpnServer
// for forward compatibility
type VpnServer interface {
	Gateways(context.Context, *Empty) (*GetGateways, error)
	Connect(*ConnectRequest, Vpn_ConnectServer) error
	Disconnect(*Empty, Vpn_DisconnectServer) error
	mustEmbedUnimplementedVpnServer()
}

// UnimplementedVpnServer must be embedded to have forward compatible implementations.
type UnimplementedVpnServer struct {
}

func (UnimplementedVpnServer) Gateways(context.Context, *Empty) (*GetGateways, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gateways not implemented")
}
func (UnimplementedVpnServer) Connect(*ConnectRequest, Vpn_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedVpnServer) Disconnect(*Empty, Vpn_DisconnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedVpnServer) mustEmbedUnimplementedVpnServer() {}

// UnsafeVpnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VpnServer will
// result in compilation errors.
type UnsafeVpnServer interface {
	mustEmbedUnimplementedVpnServer()
}

func RegisterVpnServer(s grpc.ServiceRegistrar, srv VpnServer) {
	s.RegisterService(&Vpn_ServiceDesc, srv)
}

func _Vpn_Gateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServer).Gateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vpn_Gateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServer).Gateways(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpn_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VpnServer).Connect(m, &vpnConnectServer{stream})
}

type Vpn_ConnectServer interface {
	Send(*GenericPayload) error
	grpc.ServerStream
}

type vpnConnectServer struct {
	grpc.ServerStream
}

func (x *vpnConnectServer) Send(m *GenericPayload) error {
	return x.ServerStream.SendMsg(m)
}

func _Vpn_Disconnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VpnServer).Disconnect(m, &vpnDisconnectServer{stream})
}

type Vpn_DisconnectServer interface {
	Send(*GenericPayload) error
	grpc.ServerStream
}

type vpnDisconnectServer struct {
	grpc.ServerStream
}

func (x *vpnDisconnectServer) Send(m *GenericPayload) error {
	return x.ServerStream.SendMsg(m)
}

// Vpn_ServiceDesc is the grpc.ServiceDesc for Vpn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vpn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vpn",
	HandlerType: (*VpnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gateways",
			Handler:    _Vpn_Gateways_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Vpn_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Disconnect",
			Handler:       _Vpn_Disconnect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateways.proto",
}
